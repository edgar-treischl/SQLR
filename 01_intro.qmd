# Introduction

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)

library(tidyverse)

df <- tribble(
  ~x, ~y,  ~z,
  "a", 2,  3.6,
  "b", 1,  8.5
)
df

#df <- as.data.frame(df)


library(DBI)
#library(klippy)

# Create an ephemeral in-memory RSQLite database
con <- dbConnect(drv = RSQLite::SQLite(), 
                 dbname = ":memory:")

dbListTables(con)
dbWriteTable(conn = con, 
             name = "mtcars", 
             value = mtcars)
dbWriteTable(con, "iris", iris)
dbWriteTable(con, "df", df)
dbListTables(con)
```

The biggest mistake trying to learn SQL first. If you ever opened a book that introduces SQL (or any other programming language) to will find several chapters that outline what SQL (structured query language) is. An explanation from the Wikipedia page should be sufficient: "SQL a domain-specific language used in programming and designed for managing data held in a relational database management system (RDBMS), or for stream processing in a relational data stream management system (RDSMS)". Thus, in a nutshell we can remember that SQL is a language to manage data (tables) in databases. 

The next chapters of a typical introduction shows you how to setup the software and the database. I'll skip this step because setting up a database on your own computer does not make much sense and there are smarter ways to learn the first steps if you are a R user. For example, this website includes SQL code and output but this does not imply that I have connected to a database. Instead we can use R packages such as `DBI` to setup the connection and include your SQL code directly in your RMarkdown document or an R script. There is no need for a database in the beginning, we can make use of the the *local memory* to simulate a database, save a table (data frame) and run SQL commands directly as a code chunk from the R script. Consider the next console, it shows SQL code to select a variable from a data set as an example.

```{sql connection=con, eval = FALSE}
SELECT VAR FROM data;
```


To run this code from R without a database, we need to establish a local connection (`con`), writte the data into the local data base with `dbWriteTable()`. The next console shows how it works. 

```{r, eval=FALSE}
library(DBI)
library(RSQLite)

# Create in-memory RSQLite database
con <- dbConnect(drv = RSQLite::SQLite(), 
                 dbname = ":memory:")

#Write a table into the data base
dbWriteTable(conn = con, 
             name = "mtcars", 
             value = mtcars)
```

I hope you are familiar with the `mtcars` and the `iris` data if you want to reproduce these first SQL steps. Both are implemented in R and in this chapter we explore first SQL commands with this data. To this end, you need to insert a table into the data base. As the last console for the `mtcars` data highlighted. The `dbListTables()` functions lists all loaded tables of the used data base.

```{r}
dbListTables(con)
```

After we have made a connection and the data is available, the `sqldf` package let us run SQL code from R.

```{r, warning=FALSE, message=FALSE}
#Run SQL code from R
library(sqldf)
sqldf('SELECT * FROM mtcars LIMIT 5;')
```

Thus, such R packages increases your learning curve substanially, since we can establish a data base and try some SQL code without any other equipment than your local machine. In Chapter XX we will establish a connection to a SQL data base, but for the moment there is no need to. The remaining part of this chapter shows first SQL commands.

## Select

-   Use select to retrieve a table or a column from a table
-   You can select a single column from a table
-   Or select the entire table (data frame) with the wildcard `*`

```{sql connection=con}
SELECT * FROM mtcars;
```

-   Limit the output by providing the number of lines

```{sql connection=con}
SELECT mpg, disp FROM mtcars LIMIT 5;
```

-   You can also insert a starting point that skips some observations. For instance, `OFFSET 10` will skip the first ten table entries
-   Use quotations marks if the column contains special characters (like `'Petal.Width'` from iris data)

## Where

-   Define what you want to select with the `Where` option (SQL folks say clause)
-   For instance, the variable `am` is a binary indicator (0/1) and you can use *where* to select data only if `am = 0`

```{sql connection=con}
SELECT * FROM mtcars WHERE am = 0 LIMIT 5;
```

-   Remember to use quotation marks if you try to use *where* with non-numerical values from: e.g. `!= 'label'`

```{sql connection=con}
SELECT * FROM iris WHERE Species = "virginica"  LIMIT 5;
```

## Count

-   Count counts cases!

```{sql connection=con}
SELECT COUNT(*) FROM mtcars;
```

-   We can count subgroups with the `WHERE` clause:

```{sql connection=con}
SELECT COUNT(am) FROM mtcars WHERE am != 0;
```

## DISTINCT

-   `Distinct` can be used to find distinct values. For instance, there are three different species in the iris data:

```{sql connection=con}
SELECT DISTINCT Species FROM iris
```

-   As in other programming languages, we can combine several commands. For instance, we can `COUNT` how many `Distinct` species the iris data has:

```{sql connection=con}
SELECT COUNT (DISTINCT Species) FROM iris
```

## Insert Values

-   Next, I use a small data set (df) to illustrate how to *insert values*, *make updates*, and *delete cases*

-   My toy data set `df` has two observations with three variables: `x,y,z`

-   Never mind if you do not know what a `tribble` is, it is just a command to create data

```{r, echo=TRUE}
library(tidyverse)

df <- tribble(
  ~x, ~y,  ~z,
  "a", 2,  3.6,
  "b", 1,  8.5
)
df
```

-   Now, we can insert new values into `df` by providing a list of the columns you want to fill in with values for each column:

```{sql connection=con}
INSERT INTO df (x, y, z) VALUES('c', 3, 1);
```

Let's see whether it worked:

```{sql connection=con}
SELECT * FROM df;
```

## Updates

-   Make updates for single (or multiple) values
-   For instance, we can update the variable z and set `z = 77` for a certain level of another variable:

```{sql connection=con}
UPDATE df SET z = 77 WHERE x ='b';
```

-   Take care, without the `WHERE` clause all observation would get the new value!

```{sql connection=con}
SELECT * FROM df;
```

## Delete

-   We can drop or delete observations, but of course we should take care since we probably do not want to delete the entire table, just for some implausible values

-   For this reason we use the `WHERE` clause again, for instance, to get rid of second row of the toy data set:

```{sql connection=con}
DELETE from df WHERE x = 'b';
```

```{sql connection=con}
SELECT * FROM df;
```

In summary, we have to select a table from the database, specify conditions with the where clause and we can use count to get a first impression of the data. We saw how to insert values, a really vague concept if you are used to work with data, but from a SQL perspective you give the database a update or imagine that a stream of new data needs an update. If SQL seems like something you have to get used to it, don't be afraid, me too.




